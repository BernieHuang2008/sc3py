{
  "motion_movesteps": {
    "code": "self.move_forward(__!inputs.STEPS!__)\n",
    "comment": "move forward __!inputs.STEPS!__ steps.",
    "indents": [
      0
    ]
  },
  "motion_turnright": {
    "code": "self.turn(__!inputs.DEGREES!__)\n",
    "comment": "turn right __!inputs.DEGREES!__ degrees.",
    "indents": [
      0
    ]
  },
  "motion_turnleft": {
    "code": "self.turn(-__!inputs.DEGREES!__)\n",
    "comment": "turn left __!inputs.DEGREES!__ degrees.",
    "indents": [
      0
    ]
  },
  "motion_goto": {
    "code": "self.go_to(__!inputs.TO!__)\n",
    "comment": "go to __!inputs.TO!__.",
    "indents": [
      0
    ]
  },
  "motion_goto_menu": {
    "code": "'__!fields.TO!__'",
    "comment": null,
    "indents": [
      0
    ]
  },
  "motion_gotoxy": {
    "code": "self.go_to(__!inputs.X!__, __!inputs.Y!__)\n",
    "comment": "go to (__!inputs.X!__, __!inputs.Y!__).",
    "indents": [
      0,
      0
    ]
  },
  "motion_glideto": {
    "code": "self.go_to(__!inputs.TO!__, secs=__!inputs.SECS!__)\n",
    "comment": "glide to __!inputs.TO!__ in __!inputs.SECS!__s.",
    "indents": [
      0,
      0
    ]
  },
  "motion_glideto_menu": {
    "code": "'__!fields.TO!__'",
    "comment": null,
    "indents": [
      0
    ]
  },
  "motion_glidesecstoxy": {
    "code": "self.go_to(__!inputs.X!__, __!inputs.Y!__, secs=__!inputs.SECS!__)\n",
    "comment": "glide to (__!inputs.X!__, __!inputs.Y!__) in __!inputs.SECS!__s.",
    "indents": [
      0,
      0,
      0
    ]
  },
  "motion_pointindirection": {
    "code": "self.point_towards(__!inputs.DIRECTION!__)\n",
    "comment": "point in direction __!inputs.DIRECTION!__.",
    "indents": [
      0
    ]
  },
  "motion_pointtowards": {
    "code": "self.point_towards(__!inputs.TOWARDS!__)\n",
    "comment": "point towards __!inputs.TOWARDS!__.",
    "indents": [
      0
    ]
  },
  "motion_pointtowards_menu": {
    "code": "'__!fields.TOWARDS!__'",
    "comment": null,
    "indents": [
      0
    ]
  },
  "motion_changexby": {
    "code": "self.go_to(self.x + __!inputs.DX!__, self.y)\n",
    "comment": "change x by __!inputs.DX!__.",
    "indents": [
      0
    ]
  },
  "motion_setx": {
    "code": "self.go_to(__!inputs.X!__, self.y)\n",
    "comment": "set x to __!inputs.X!__.",
    "indents": [
      0
    ]
  },
  "motion_changeyby": {
    "code": "self.go_to(self.x, self.y + __!inputs.DY!__)\n",
    "comment": "change y by __!inputs.DY!__.",
    "indents": [
      0
    ]
  },
  "motion_sety": {
    "code": "self.go_to(self.x, __!inputs.Y!__)\n",
    "comment": "set y to __!inputs.Y!__.",
    "indents": [
      0
    ]
  },
  "motion_ifonedgebounce": {
    "code": "if self.on_edge():\n    self.bounce(self.on_edge()) # TODO\n",
    "comment": "if on edge, bounce.",
    "indents": [
    ]
  },
  "motion_setrotationstyle": {
    "code": "self.restrict('rotation', '__!fields.STYLE!__')\n",
    "comment": "set rotation style to __!fields.STYLE!__.",
    "indents": [
      0
    ]
  },
  "looks_say": {
    "code": "self.say(__!inputs.MESSAGE!__)\n",
    "comment": "say __!inputs.MESSAGE!__.",
    "indents": [
      0
    ]
  },
  "looks_sayforsecs": {
    "code": "self.say(__!inputs.MESSAGE!__, secs=__!inputs.SECS!__)\n",
    "comment": "say __!inputs.MESSAGE!__ for __!inputs.SECS!__s.",
    "indents": [
      0,
      0
    ]
  },
  "looks_think": {
    "code": "self.think(__!inputs.MESSAGE!__)\n",
    "comment": "think __!inputs.MESSAGE!__.",
    "indents": [
      0
    ]
  },
  "looks_thinkforsecs": {
    "code": "self.think(__!inputs.MESSAGE!__, secs=__!inputs.SECS!__)\n",
    "comment": "think __!inputs.MESSAGE!__ for __!inputs.SECS!__s.",
    "indents": [
      0,
      0
    ]
  },
  "looks_switchcostumeto": {
    "code": "self.set_costume(__!inputs.COSTUME!__)\n",
    "comment": "switch costume to __!inputs.COSTUME!__.",
    "indents": [
      0
    ]
  },
  "looks_costume": {
    "code": "'__!fields.COSTUME!__'",
    "comment": null,
    "indents": [
      0
    ]
  },
  "looks_nextcostume": {
    "code": "self.next_costume()\n",
    "comment": "next costume.",
    "indents": []
  },
  "looks_switchbackdropto": {
    "code": "game.set_backdrop(__!inputs.BACKDROP!__)\n",
    "comment": "switch backdrop to __!inputs.BACKDROP!__.",
    "indents": [
      0
    ]
  },
  "looks_backdrops": {
    "code": "'__!fields.BACKDROP!__'",
    "comment": null,
    "indents": [
      0
    ]
  },
  "looks_nextbackdrop": {
    "code": "game.next_backdrop()\n",
    "comment": "next backdrop.",
    "indents": []
  },
  "looks_changesizeby": {
    "code": "self.resize(self.size + __!inputs.CHANGE!__)\n",
    "comment": "change size by __!inputs.CHANGE!__%.",
    "indents": [
      0
    ]
  },
  "looks_setsizeto": {
    "code": "self.resize(__!inputs.SIZE!__)\n",
    "comment": "set size to __!inputs.SIZE!%.",
    "indents": [
      0
    ]
  },
  "looks_changeeffectby": {
    "code": "self.effects['__!fields.EFFECT!__'] += __!inputs.CHANGE!__\nself.affect()\n",
    "comment": "change __!fields.EFFECT!__ effect by __!inputs.CHANGE!__.",
    "indents": [
      0,
      0
    ]
  },
  "looks_seteffectto": {
    "code": "self.effects['__!fields.EFFECT!__'] = __!inputs.VALUE!__\nself.affect()\n",
    "comment": "set __!fields.EFFECT!__ effect to __!inputs.VALUE!__.",
    "indents": [
      0,
      0
    ]
  },
  "looks_cleargraphiceffects": {
    "code": "self.clear_effects('looks')\n",
    "comment": "clear graphic effects.",
    "indents": []
  },
  "looks_show": {
    "code": "self.show()\n",
    "comment": "show.",
    "indents": []
  },
  "looks_hide": {
    "code": "self.hide()\n",
    "comment": "hide.",
    "indents": []
  },
  "looks_gotofrontback": {
    "code": "game.layer.adjust(self, '__!fields.FRONT_BACK!__')\n",
    "comment": "go to __!fields.FRONT_BACK!__ layer.",
    "indents": [
      0
    ]
  },
  "looks_goforwardbackwardlayers": {
    "code": "game.layer.adjust(self, __!inputs.NUM!__)\n",
    "comment": "go forward/backward __!inputs.NUM!__ layers.",
    "indents": [
      0
    ]
  },
  "sound_playuntildone": {
    "code": "self.play_sound(__!inputs.SOUND_MENU!__, wait=True)\n",
    "comment": "play sound __!inputs.SOUND_MENU!__ until done.",
    "indents": [
      0
    ]
  },
  "sound_sounds_menu": {
    "code": "'__!fields.SOUND_MENU!__'",
    "comment": null,
    "indents": [
      0
    ]
  },
  "sound_play": {
    "code": "self.play_sound(__!inputs.SOUND_MENU!__)\n",
    "comment": "play sound __!inputs.SOUND_MENU!__.",
    "indents": [
      0
    ]
  },
  "sound_stopallsounds": {
    "code": "game.stop_all_sounds()\n",
    "comment": "stop all sounds.",
    "indents": []
  },
  "sound_changeeffectby": {
    "code": "self.effects['__!fields.EFFECT!__'] += __!inputs.VALUE!__\nself.affect()\n",
    "comment": "change __!fields.EFFECT!__ effect by __!inputs.VALUE!__.",
    "indents": [
      0,
      0
    ]
  },
  "sound_seteffectto": {
    "code": "self.effects['__!fields.EFFECT!__'] = __!inputs.VALUE!__\nself.affect()\n",
    "comment": "set __!fields.EFFECT!__ effect to __!inputs.VALUE!__.",
    "indents": [
      0,
      0
    ]
  },
  "sound_cleareffects": {
    "code": "self.clear_effects('sound')\n",
    "comment": "clear sound effects.",
    "indents": []
  },
  "sound_changevolumeby": {
    "code": "self.volume += __!inputs.VOLUME!__\n",
    "comment": "change volume by __!inputs.VOLUME!__.",
    "indents": [
      0
    ]
  },
  "sound_setvolumeto": {
    "code": "self.volume = __!inputs.VOLUME!__\n",
    "comment": "set volume to __!inputs.VOLUME!__.",
    "indents": [
      0
    ]
  },
  "event_broadcast": {
    "code": "game.broadcast('__!inputs.BROADCAST_INPUT!__')\n",
    "comment": "broadcast __!inputs.BROADCAST_INPUT!__.",
    "indents": [
      0
    ]
  },
  "event_broadcastandwait": {
    "code": "game.broadcast('__!inputs.BROADCAST_INPUT!__', wait=True)\n",
    "comment": "broadcast __!inputs.BROADCAST_INPUT!__ and wait.",
    "indents": [
      0
    ]
  },
  "control_repeat": {
    "code": "for _ in range(__!inputs.TIMES!__):\n    __!inputs.SUBSTACK!__\n",
    "comment": "repeat __!inputs.TIMES!__ times.",
    "indents": [
      0,
      4
    ]
  },
  "control_forever": {
    "code": "while True:\n    __!inputs.SUBSTACK!__\n",
    "comment": "loop forever.",
    "indents": [
      4
    ]
  },
  "control_if": {
    "code": "if __!inputs.CONDITION!__:\n    __!inputs.SUBSTACK!__\n",
    "comment": null,
    "indents": [
      0,
      4
    ]
  },
  "control_if_else": {
    "code": "if __!inputs.CONDITION!__:\n    __!inputs.SUBSTACK!__\nelse:\n    __!inputs.SUBSTACK2!__\n",
    "comment": null,
    "indents": [
      0,
      4,
      4
    ]
  },
  "control_stop": {
    "code": "game.stop('__!fields.STOP_OPTION!__')\n",
    "comment": "stop __!fields.STOP_OPTION!__.",
    "indents": [
      0
    ]
  },
  "control_wait": {
    "code": "self.wait(__!inputs.DURATION!__)\n",
    "comment": "wait __!inputs.DURATION!__ seconds.",
    "indents": [
      0
    ]
  },
  "control_wait_until": {
    "code": "while not __!inputs.CONDITION!__:\n    self.wait()\n",
    "comment": "wait until __!inputs.CONDITION!__.",
    "indents": [
      0
    ]
  },
  "sensing_keypressed": {
    "code": "game.is_keypressed(__!inputs.KEY_OPTION!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "sensing_keyoptions": {
    "code": "'__!fields.KEY_OPTION!__'",
    "comment": null,
    "indents": [
      0
    ]
  },
  "sensing_touchingobject": {
    "code": 
  },
  "operator_add": {
    "code": "(__!inputs.NUM1!__) + (__!inputs.NUM2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_substract": {
    "code": "(__!inputs.NUM1!__) - (__!inputs.NUM2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_multiply": {
    "code": "(__!inputs.NUM1!__) * (__!inputs.NUM2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_divide": {
    "code": "(__!inputs.NUM1!__) / (__!inputs.NUM2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_lt": {
    "code": "(__!inputs.OPERAND1!__) < (__!inputs.OPERAND2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_gt": {
    "code": "(__!inputs.OPERAND1!__) > (__!inputs.OPERAND2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_equals": {
    "code": "(__!inputs.OPERAND1!__) == (__!inputs.OPERAND2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_and": {
    "code": "(__!inputs.OPERAND1!__) and (__!inputs.OPERAND2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_or": {
    "code": "(__!inputs.OPERAND1!__) or (__!inputs.OPERAND2!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  },
  "operator_not": {
    "code": "not (__!inputs.OPERAND!__)",
    "comment": null,
    "indents": [
      0
    ]
  },
  "operator_random": {
    "code": "scgame.random(__!inputs.FROM!__, __!inputs.TO!__)",
    "comment": null,
    "indents": [
      0,
      0
    ]
  }
}