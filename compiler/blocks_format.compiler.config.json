{
  "control_repeat": {
    "code": "for _ in range(__!inputs.['TIMES'][1]!__):  # repeat __!inputs.['TIMES'][1]!__ times.\n    __!inputs.['SUBSTACK'][1]!__\n    await asyncio.sleep(0)  # [DO NOT DEL] yield to other coroutines.\n",
    "indents": [
      0,
      0,
      4
    ]
  },
  "motion_glidesecstoxy": {
    "code": "await self.glide_to(__!inputs.['X'][1]!__, __!inputs.['Y'][1]!__, secs=__!inputs.['SECS'][1]!__)  # gilde to (__!inputs.['X'][1]!__, __!inputs.['Y'][1]!__) in __!inputs.['SECS'][1]!__s.\n",
    "indents": [
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  "control_forever": {
    "code": "while True:  # infinity loop.\n    __!inputs.['SUBSTACK'][1]!__\n    await asyncio.sleep(0)  # [DO NOT DEL] yield to other coroutines.\n",
    "indents": [
      4
    ]
  },
  "control_if": {
    "code": "if __!inputs.['CONDITION'][1]!__:\n    __!inputs.['SUBSTACK'][1]!__\n",
    "indents": [
      0,
      4
    ]
  },
  "control_if_else": {
    "code": "if __!inputs.['CONDITION'][1]!__:\n    __!inputs.['SUBSTACK'][1]!__\nelse:\n    __!inputs.['SUBSTACK2'][1]!__\n",
    "indents": [
      0,
      4,
      4
    ]
  },
  "looks_thinkforsecs": {
    "code": "await self.think_bubble(__!inputs.['MESSAGE'][1]!__, secs=__!inputs.['SECS'][1]!__)  # think __!inputs.['MESSAGE'][1]!__ for __!inputs.['SECS'][1]!__s.\n",
    "indents": [
      0,
      0,
      0,
      0
    ]
  },
  "operator_equals": {
    "code": "__!inputs.['OPERAND1'][1]!__ == __!inputs.['OPERAND2'][1]!__",
    "indents": [
      0,
      0
    ]
  },
  "sensing_keypressed": {
    "code": "game.is_keypressed(__!inputs.['KEY_OPTION'][1]!__)",
    "indents": [
      0,
      0
    ]
  },
  "sensing_keyoptions": {
    "code": "'__!fields.['KEY_OPTION'][0]!__'",
    "indents": [
      0
    ]
  },
  "motion_movesteps": {
    "code": "await self.move_forward(__!inputs.['STEPS'][1]!__)  # move forward for __!inputs.['STEPS'][1]!__ steps.\n",
    "indents": [
      0,
      0
    ]
  },
  "operator_random": {
    "code": "scgame.random(__!inputs.['FROM'][1]!__, __!inputs.['TO'][1]!__)",
    "indents": [
      0,
      0
    ]
  },
  "control_stop": {
    "code": "game.stop('__!fields.['STOP_OPTION'][0]!__')  # stop __!fields.['STOP_OPTION'][0]!__.\n",
    "indents": [
      0,
      0
    ]
  }
}