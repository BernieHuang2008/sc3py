{
  "control_repeat": {
    "code": "for _ in range(__!inputs.['TIMES'][1]!__):  # repeat __!inputs.['TIMES'][1]!__ times.\n    __!inputs.['SUBSTACK'][1]!__\n",
    "indents": [
      0,
      0,
      4
    ]
  },
  "motion_glidesecstoxy": {
    "code": "self.go_to(__!inputs.['X'][1]!__, __!inputs.['Y'][1]!__, secs=__!inputs.['SECS'][1]!__)  # gilde to (__!inputs.['X'][1]!__, __!inputs.['Y'][1]!__) in __!inputs.['SECS'][1]!__s.\n",
    "indents": [
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  "control_forever": {
    "code": "while True:  # infinity loop.\n    __!inputs.['SUBSTACK'][1]!__\n",
    "indents": [
      4
    ]
  },
  "control_if": {
    "code": "if __!inputs.['CONDITION'][1]!__:\n    __!inputs.['SUBSTACK'][1]!__\n",
    "indents": [
      0,
      4
    ]
  },
  "control_if_else": {
    "code": "if __!inputs.['CONDITION'][1]!__:\n    __!inputs.['SUBSTACK'][1]!__\nelse:\n    __!inputs.['SUBSTACK2'][1]!__\n",
    "indents": [
      0,
      4,
      4
    ]
  },
  "operator_equals": {
    "code": "__!inputs.['OPERAND1'][1]!__ == __!inputs.['OPERAND2'][1]!__",
    "indents": [
      0,
      0
    ]
  },
  "sensing_keypressed": {
    "code": "game.is_keypressed(__!inputs.['KEY_OPTION'][1]!__)",
    "indents": [
      0,
      0
    ]
  },
  "sensing_keyoptions": {
    "code": "'__!fields.['KEY_OPTION'][0]!__'",
    "indents": [
      0
    ]
  },
  "motion_movesteps": {
    "code": "self.move_forward(__!inputs.['STEPS'][1]!__)  # move forward for __!inputs.['STEPS'][1]!__ steps.\n",
    "indents": [
      0,
      0
    ]
  },
  "operator_random": {
    "code": "scgame.random(__!inputs.['FROM'][1]!__, __!inputs.['TO'][1]!__)",
    "indents": [
      0,
      0
    ]
  },
  "control_stop": {
    "code": "game.stop('__!fields.['STOP_OPTION'][0]!__')  # stop __!fields.['STOP_OPTION'][0]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_turnright": {
    "code": "self.turn(__!inputs.['DEGREES'][1]!__)  # turn right __!inputs.['DEGREES'][1]!__ degrees.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_turnleft": {
    "code": "self.turn(-1 * __!inputs.['DEGREES'][1]!__)  # turn left __!inputs.['DEGREES'][1]!__ degrees.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_goto": {
    "code": "self.go_to(__!inputs.['TO'][1]!__)  # go to __!inputs.['TO'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_goto_menu": {
    "code": "'__!fields.['TO'][0]!__'",
    "indents": [
      0
    ]
  },
  "motion_gotoxy": {
    "code": "self.go_to(__!inputs.['X'][1]!__, __!inputs.['Y'][1]!__)  # go to (__!inputs.['X'][1]!__, __!inputs.['Y'][1]!__).\n",
    "indents": [
      0,
      0,
      0,
      0
    ]
  },
  "motion_glideto": {
    "code": "self.go_to(__!inputs.['TO'][1]!__, secs=__!inputs.['SECS'][1]!__)  # glide to __!inputs.['TO'][1]!__ in __!inputs.['SECS'][1]!__s.\n",
    "indents": [
      0,
      0,
      0,
      0,
      0,
      0
    ]
  },
  "motion_glideto_menu": {
    "code": "'__!fields.['TO'][0]!__'",
    "indents": [
      0
    ]
  },
  "motion_pointindirection": {
    "code": "self.point_towards(__!inputs.['DIRECTION'][1]!__)  # point in direction __!inputs.['DIRECTION'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_pointtowards": {
    "code": "self.point_towards(__!inputs.['TOWARDS'][1]!__)  # point towards __!inputs.['TOWARDS'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_pointtowards_menu": {
    "code": "'__!fields.['TOWARDS'][0]!__'",
    "indents": [
      0
    ]
  },
  "motion_changexby": {
    "code": "self.change_x(__!inputs.['DX'][1]!__)  # change x by __!inputs.['DX'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_setx": {
    "code": "self.set_x(__!inputs.['X'][1]!__)  # set x to __!inputs.['X'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_changeyby": {
    "code": "self.change_y(__!inputs.['DY'][1]!__)  # change y by __!inputs.['DY'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_sety": {
    "code": "self.set_y(__!inputs.['Y'][1]!__)  # set y to __!inputs.['Y'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_ifonedgebounce": {
    "code": "if self.on_edge():\n    self.bounce()  # bounce if on edge.\n",
    "indents": [
      0,
      0
    ]
  },
  "motion_setrotationstyle": {
    "code": "self.restrict('rotation', '__!fields.['STYLE'][0]!__')  # set rotation style to __!fields.['STYLE'][0]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "looks_say": {
    "code": "self.say(__!inputs.['MESSAGE'][1]!__)  # say __!inputs.['MESSAGE'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "looks_sayforsecs": {
    "code": "self.say(__!inputs.['MESSAGE'][1]!__, secs=__!inputs.['SECS'][1]!__)  # say __!inputs.['MESSAGE'][1]!__ for __!inputs.['SECS'][1]!__s.\n",
    "indents": [
      0,
      0,
      0,
      0
    ]
  },
  "looks_think": {
    "code": "self.think(__!inputs.['MESSAGE'][1]!__)  # think __!inputs.['MESSAGE'][1]!__.\n",
    "indents": [
      0,
      0
    ]
  },
  "looks_thinkforsecs": {
    "code": "self.think(__!inputs.['MESSAGE'][1]!__, secs=__!inputs.['SECS'][1]!__)  # think __!inputs.['MESSAGE'][1]!__ for __!inputs.['SECS'][1]!__s.\n",
    "indents": [
      0,
      0,
      0,
      0
    ]
  },
  "looks_switchcostumeto": {
    "code": "self.set_costume(self.costumes.find(__!inputs.['COSTUME'][1]!__))  # switch costume.\n",
    "indents": [
      0
    ]
  },
  "looks_costume": {
    "code": "self.costumes['__!fields.['COSTUME'][0]!__']",
    "indents": [
      0
    ]
  },
  "looks_nextcostume": {
    "code": "self.next_costume()  # next costume.\n",
    "indents": []
  },
  "looks_switchbackdropto": {
    "code": "self.set_backdrop(self.backdrops.find(__!inputs.['BACKDROP'][1]!__))  # switch backdrop.\n",
    "indents": [
      0,
      0
    ]
  },
  "looks_backdrops": {
    "code": "self.backdrops['__!fields.['BACKDROP'][0]!__']",
    "indents": [
      0
    ]
  },
  "looks_nextbackdrop": {
    "code": "self.next_backdrop()  # next backdrop.\n",
    "indents": []
  },
  "looks_changesizeby": {
    "code": "self.resize(self.size + __!inputs.['CHANGE'][1]!__)  # change size by __!inputs.['CHANGE'][1]!__%.\n",
    "indents": [
      0,
      0
    ]
  },
  "looks_setsizeto": {
    "code": "self.resize(__!inputs.['SIZE'][1]!__)  # set size to __!inputs.['SIZE'][1]!__%.\n",
    "indents": [
      0,
      0
    ]
  },
  "looks_changeeffectby": {
    "code": "self.set_effect('__!fields.['EFFECT'][0]!__', effects['__!fields.['EFFECT'][0]!__'] + __!inputs.['CHANGE'][1]!__)  # change __!fields.['EFFECT'][0]!__ effect by __!inputs.['CHANGE'][1]!__.\n",
    "indents": [
      0,
      0,
      0,
      0,
      0
    ]
  },
  "looks_seteffectto": {
    "code": "self.set_effect('__!fields.['EFFECT'][0]!__', __!inputs.['VALUE'][1]!__)  # set __!fields.['EFFECT'][0]!__ effect to __!inputs.['VALUE'][1]!__.\n",
    "indents": [
      0,
      0,
      0,
      0
    ]
  },
  "looks_cleargraphiceffects": {
    "code": "self.clear_effects()  # clear graphic effects.\n",
    "indents": []
  },
  "looks_show": {
    "code": "self.show()  # show.\n",
    "indents": []
  },
  "looks_hide": {
    "code": "self.hide()  # hide.\n",
    "indents": []
  },
  "looks_gotofrontback": {
    "code": "self.set_layer('__!fields.['FRONT_BACK'][0]!__')  # go to __!fields.['FRONT_BACK'][0]!__ layer.\n",
    "indents": [
      0,
      0
    ]
  },
  "looks_goforwardbackwardlayers": {
    "code": "self.set_layer(self.layer + __!inputs.['NUM'][1]!__)  # go __!fields.['FORWARD_BACKWARD'][0]!__ __!inputs.['NUM'][1]!__ layers.\n",
    "indents": [
      0,
      0,
      0,
      0
    ]
  }
}